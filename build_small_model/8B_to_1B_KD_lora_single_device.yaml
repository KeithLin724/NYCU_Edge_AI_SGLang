# Config for single device knowledge distillation (KD) in knowledge_distillation_single_device.py
# using a LLAMA3 teacher and student model
#
# This config assumes that you've ran the following commands before launching KD:
# First download the student and teacher models
#   tune download meta-llama/Llama-3.2-1B-Instruct --output-dir <YOUR_STUDENT_MODEL_PATH> --ignore-patterns "original/consolidated.00.pth"
#   tune download meta-llama/Llama-3.2-3B-Instruct --output-dir <YOUR_TEACHER_MODEL_PATH> --ignore-patterns "original/consolidated.00.pth"
#
# You get better results using KD if the teacher model has already been fine-tuned on the target dataset:
#   tune run lora_finetune_single_device --config llama3_1/8B_lora_single_device
#
# To launch on a single device, run the following command from root:
#   tune run knowledge_distillation_single_device --config 8B_to_1B_KD_lora_single_device.yaml
#
# This config works only for training on single device.

seed: null
batch_size: 1
shuffle: true

output_dir: <YOUR_OUTPUT_DIR>

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.lora_llama3_2_1b
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  apply_lora_to_output: False
  lora_rank: 64  # higher increases accuracy and memory
  lora_alpha: 128  # usually alpha=2*rank
  lora_dropout: 0.0

teacher_model:
  _component_: torchtune.models.llama3_2.llama3_2_3b

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: <YOUR_STUDENT_MODEL_PATH>/original/tokenizer.model
  max_seq_len: 2048

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: <YOUR_STUDENT_MODEL_PATH>
  checkpoint_files: [
    model.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False
save_adapter_weights_only: False

# Teacher checkpoint
teacher_checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: <YOUR_TEACHER_MODEL_PATH>
  checkpoint_files: [
    model-00001-of-00002.safetensors,
    model-00002-of-00002.safetensors
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets._wikitext.wikitext_dataset
  source: EleutherAI/wikitext_document_level
  subset: wikitext-2-raw-v1
  packed: True

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

kd_loss:
  _component_: torchtune.modules.loss.ForwardKLWithChunkedOutputLoss
kd_ratio: 0.5

# Training
epochs: 1
max_steps_per_epoch: null
gradient_accumulation_steps: 8  # Use to increase effective batch size
clip_grad_norm: null
compile: False  # torch.compile the model + loss, True increases speed + decreases memory

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.DiskLogger
  log_dir: ${output_dir}/logs
log_every_n_steps: 1
log_peak_memory_stats: True
log_level: INFO  # DEBUG, WARN, etc.

# Environment
device: cuda
dtype: bf16

# Activations Memory
enable_activation_checkpointing: False  # True reduces memory
enable_activation_offloading: False  # True reduces memory

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False
  output_dir: ${output_dir}/profiling_outputs
  cpu: True
  cuda: True
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1 